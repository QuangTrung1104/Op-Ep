
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.List;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JTextPane;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

import edu.stanford.nlp.parser.ui.TreeJPanel;
import edu.stanford.nlp.trees.Tree;
import edu.stanford.nlp.trees.*;
import java.awt.*;
import java.awt.event.*;
import javax.management.remote.JMXConnectorFactory.*;
import javax.swing.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author BùiQuangTrung
 */
public class FrHome extends javax.swing.JFrame {

    /**
     * Creates new form FrHome
     */
    int i_count = 0;
    int i_count2varriable = 0;
    int i_count_SentenceHaveProbability = 0;

    ArrayList<String> str_Left2Variable = new ArrayList<String>();
    ArrayList<String> str_Right1of2variable = new ArrayList<String>();
    ArrayList<String> str_Right2of2variable = new ArrayList<String>();

    ArrayList<String> str_Left2Variable1 = new ArrayList<String>();
    ArrayList<String> str_Right1of2variable1 = new ArrayList<String>();
    ArrayList<String> str_Right2of2variable1 = new ArrayList<String>();

    ArrayList<String> str_SentenceKT1 = new ArrayList<String>();
    ArrayList<String> str_treebankKT1 = new ArrayList<String>();
    ArrayList<String> str_SentenceKT = new ArrayList<String>();
    ArrayList<String> str_treebankKT = new ArrayList<String>();
    ArrayList<String> str_tree = new ArrayList<String>();
    ArrayList<String> str_sentenTree = new ArrayList<String>();

    ArrayList<Float> f_ProbabilityKT = new ArrayList<Float>();

    ArrayList<String> str_treebank = new ArrayList<String>();
    ArrayList<String> str_Sentence = new ArrayList<String>();
    ArrayList<String> str_treebankTrung = new ArrayList<String>();
    ArrayList<String> str_SentenceTrung = new ArrayList<String>();
    ArrayList<String> str_Left2VariableKTXX = new ArrayList<String>();
    ArrayList<String> str_Right1of2variableKTXX = new ArrayList<String>();
    ArrayList<String> str_Right2of2variableKTXX = new ArrayList<String>();

    ArrayList<String> str_Left2VariableKTXXTrung = new ArrayList<String>();
    ArrayList<String> str_Right1of2variableKTXXTrung = new ArrayList<String>();
    ArrayList<String> str_Right2of2variableKTXXTrung = new ArrayList<String>();

    //float f_Probability;
    ArrayList<Float> f_Probability = new ArrayList<Float>();

    public FrHome() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtGrammar = new javax.swing.JTextPane();
        btnProbability = new javax.swing.JButton();
        btnActionPCFG = new javax.swing.JButton();
        txtInput = new javax.swing.JTextField();
        scrPnl = new javax.swing.JScrollPane();
        pnlCKY = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtProba = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Final Project");
        setSize(new java.awt.Dimension(0, 0));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Grammar have probability"));

        jScrollPane1.setViewportView(txtGrammar);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        btnProbability.setText("Probability");
        btnProbability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProbabilityActionPerformed(evt);
            }
        });

        btnActionPCFG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/action.png"))); // NOI18N
        btnActionPCFG.setText("    Action P-CKY"); // NOI18N
        btnActionPCFG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPCFGActionPerformed(evt);
            }
        });

        txtInput.setText("nam thích đọc sách ở thư viện");

        scrPnl.setAutoscrolls(true);

        pnlCKY.setAutoscrolls(true);

        javax.swing.GroupLayout pnlCKYLayout = new javax.swing.GroupLayout(pnlCKY);
        pnlCKY.setLayout(pnlCKYLayout);
        pnlCKYLayout.setHorizontalGroup(
            pnlCKYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1108, Short.MAX_VALUE)
        );
        pnlCKYLayout.setVerticalGroup(
            pnlCKYLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 756, Short.MAX_VALUE)
        );

        scrPnl.setViewportView(pnlCKY);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Grammar"));

        jScrollPane2.setViewportView(txtProba);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
        );

        jLabel1.setText("Sentence query");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnProbability)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(btnActionPCFG)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProbability)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(btnActionPCFG))
                    .addComponent(scrPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnProbabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProbabilityActionPerformed
        // TODO add your handling code here: 
        float countTotal = 0;
        float countSingle = 0;

        txtGrammar.setText("");
        i_count = 0;
        i_count2varriable = 0;
        str_treebank.clear();
        str_Sentence.clear();
        str_treebankTrung.clear();
        str_SentenceTrung.clear();
        str_Left2VariableKTXX.clear();
        str_Right1of2variableKTXX.clear();
        str_Right2of2variableKTXX.clear();

        int lenght = 0;
        txtProba.setText(txtProba.getText());
        String s = txtProba.getText();

        int i_countAmount = 4;
        s = s.replaceAll("\\(", "~");
        s = s.replaceAll("\\)", "~");
        s = s.replaceAll("\\,", "~");
        s = s.replaceAll("\\;", "~");
        //Tách các chuỗi bự  thành nhiều chuỗi nhỏ
        String[] parts = s.split("~");//chia chuoi dua tren string phan cac nhau boi khoang trang (\\s) 
        //su dung vong lap foreach de in cac phan tu trong mang chuoi  

        lenght = parts.length;
        //Chuyển các chuỗi ""  ở cuối thành .
        int i_countFinal = 0;
        for (int i = 0; i < lenght - 1; i++) {
            if (parts[i].equals("") && parts[i + 1].equals("") || parts[i + 1].equals(" ")) {
                i_countFinal++;
            }

        }
        //Chuyển về dạng A(X,Y) --> B(X), C(Y)
        int i_countTemp = 0;
        for (int i = 0; i < lenght - i_countFinal - 1; i++) {
            if (parts[i].equals("") && parts[i + 1].equals("") || parts[i + 1].equals(" ")) {
                i_countTemp++;
                continue;
            }
            if (i >= 3) {
                if (parts[i].equals("") && i_countTemp != 0 && parts[i - 1].equals("") && ((!parts[i + 1].equals("")))) {
                    i_countTemp = 0;
                    continue;
                }
            }
            if (i >= 3) {
                if (parts[i].equals("") && !parts[i - 3].equals("\r\ns")) {
                    str_Left2VariableKTXX.add(parts[i - 3]);
                    str_Right1of2variableKTXX.add(parts[i - 2]);
                    str_Right2of2variableKTXX.add(parts[i + 1]);
                    i_count2varriable++;
                    i_countTemp = 0;

                }
            }
        }

        int i_countTemp1 = 0;
        //Chuyển về dạng A(X)-->[ chữ ]
        for (int i = 0; i < lenght - 1; i++) {
            if (parts[i].equals("") && parts[i + 1].equals("")) {
                i_countTemp1++;
                continue;
            }
            if (parts[i].equals("") && i_countTemp1 != 0) {

                str_treebank.add(parts[i - 2 - i_countTemp1]);
                str_Sentence.add(parts[i - 1 - i_countTemp1]);
                i_count++;
                i_countTemp1 = 0;
                continue;
            }
            if (parts[i].equals("")) {

                str_treebank.add(parts[i - 2]);
                str_Sentence.add(parts[i - 1]);
                i_count++;
                i_countTemp1 = 0;
            }
        }

        // txtGrammar.setText(txtGrammar.getText() + "~" + "\r\n");
        int countTrungtotal1 = 0;
        for (int j = 0; j < i_count2varriable; j++) {
            countTotal = 0;
            countSingle = 0;
            for (int k = 0; k < i_count2varriable; k++) {
                if (str_Left2VariableKTXX.get(j).equals(str_Left2VariableKTXX.get(k))) {
                    countTotal++;
                }
                if (str_Left2VariableKTXX.get(j).equals(str_Left2VariableKTXX.get(k))
                        && str_Right1of2variableKTXX.get(j).equals(str_Right1of2variableKTXX.get(k))
                        && str_Right2of2variableKTXX.get(j).equals(str_Right2of2variableKTXX.get(k))) //dem np-->nam
                {
                    countSingle++;
                }
            }
            for (int k = 0; k < i_count; k++) {
                if (str_Left2VariableKTXX.get(j).equals(str_treebank.get(k))) {
                    countTotal++;
                }

            }
            float probabi = countSingle / countTotal * 10;
            if (countTrungtotal1 == 0) {
                str_Left2VariableKTXXTrung.add(str_Left2VariableKTXX.get(j));
                str_Right1of2variableKTXXTrung.add(str_Right1of2variableKTXX.get(j));
                str_Right2of2variableKTXXTrung.add(str_Right2of2variableKTXX.get(j));

                txtGrammar.setText(txtGrammar.getText() + str_Left2VariableKTXX.get(j) + "-->"
                        + str_Right1of2variableKTXX.get(j) + " " + str_Right2of2variableKTXX.get(j)
                        + "," + probabi + "," + "\r\n");
                countTrungtotal1++;
                continue;
            }
            int countTrung = 0;
            if (countTrungtotal1 >= 1) {

                for (int k = 0; k < countTrungtotal1; k++) {

                    if (str_Left2VariableKTXX.get(j).equals(str_Left2VariableKTXXTrung.get(k))
                            && str_Right1of2variableKTXX.get(j).equals(str_Right1of2variableKTXXTrung.get(k))
                            && str_Right2of2variableKTXX.get(j).equals(str_Right2of2variableKTXXTrung.get(k))) //dem np-->nam
                    {
                        countTrung++;
                    }

                }
            }

            if (countTrung == 0) {
                str_Left2VariableKTXXTrung.add(str_Left2VariableKTXX.get(j));
                str_Right1of2variableKTXXTrung.add(str_Right1of2variableKTXX.get(j));
                str_Right2of2variableKTXXTrung.add(str_Right2of2variableKTXX.get(j));

                countTrungtotal1++;
                txtGrammar.setText(txtGrammar.getText() + str_Left2VariableKTXX.get(j) + "-->"
                        + str_Right1of2variableKTXX.get(j) + " " + str_Right2of2variableKTXX.get(j)
                        + "," + probabi + "," + "\r\n");
            }

        }
        int countTrungtotal = 0;
        for (int j = 0; j < i_count; j++) {
            countTotal = 0;
            countSingle = 0;
            for (int k = 0; k < i_count; k++) {
                if (str_treebank.get(j).equals(str_treebank.get(k))) {
                    countTotal++;
                }
                if (str_treebank.get(j).equals(str_treebank.get(k))
                        && str_Sentence.get(j).equals(str_Sentence.get(k))) //dem np-->nam
                {
                    countSingle++;
                }
            }
            for (int k = 0; k < i_count2varriable; k++) {
                if (str_treebank.get(j).equals(str_Left2VariableKTXX.get(k))) {
                    countTotal++;
                }

            }
            float probabi = countSingle / countTotal * 10;
            if (countTrungtotal == 0) {
                str_treebankTrung.add(str_treebank.get(j));
                str_SentenceTrung.add(str_Sentence.get(j));
                txtGrammar.setText(txtGrammar.getText() + str_treebank.get(j)
                        + "-->" + str_Sentence.get(j) + "," + probabi + "," + "\r\n");
                countTrungtotal++;
                continue;
            }
            int countTrung = 0;
            if (countTrungtotal >= 1) {

                for (int k = 0; k < countTrungtotal; k++) {

                    if (str_treebank.get(j).equals(str_treebankTrung.get(k))
                            && str_Sentence.get(j).equals(str_SentenceTrung.get(k))) //dem np-->nam
                    {
                        countTrung++;
                    }

                }
            }

            if (countTrung == 0) {
                str_treebankTrung.add(str_treebank.get(j));
                str_SentenceTrung.add(str_Sentence.get(j));
                countTrungtotal++;
                txtGrammar.setText(txtGrammar.getText() + str_treebank.get(j)
                        + "-->" + str_Sentence.get(j) + "," + probabi + "," + "\r\n");

            }

        }
        str_treebank.clear();
        str_Sentence.clear();
        str_Left2VariableKTXX.clear();
        str_Right1of2variableKTXX.clear(); // moi them
        str_Right2of2variableKTXX.clear(); //moi them  
        String str_Grammar = txtGrammar.getText();
        str_Grammar = str_Grammar.replaceAll("-->", "~");
        str_Grammar = str_Grammar.replaceAll(",", "~");
        str_Grammar = str_Grammar.replaceAll("\r\n", "~");
        String[] str_separatedGrammar2 = str_Grammar.split("~");

        for (int i = 0; i < str_separatedGrammar2.length - 1; i++) {
            if (i_countAmount == 4) {
                str_Right1of2variableKTXX.add(str_separatedGrammar2[i]);
                str_Right2of2variableKTXX.add(str_separatedGrammar2[i + 1]);
                float f = Float.parseFloat(str_separatedGrammar2[i + 2]);
                f_Probability.add(f);
                i_countAmount = 1;
                i_count_SentenceHaveProbability++;   //Đếm số lương np-->tên và sác xuất của chúng
            } else {
                i_countAmount++;
            }
        }

    }//GEN-LAST:event_btnProbabilityActionPerformed

    int b;
    int a;
    private int Node_max = 0;
    String text = "";
    private void btnActionPCFGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPCFGActionPerformed

        pnlCKY.removeAll();
        str_SentenceKT.clear();
        str_treebankKT.clear();
        str_tree.clear();
        str_sentenTree.clear();
        String OutputIntxxInput = txtInput.getText();
        OutputIntxxInput = OutputIntxxInput.replaceAll("ư ", "ư");
        String[] querry = OutputIntxxInput.split("\\s");
        for (int i = 0; i < querry.length; i++) {
            str_SentenceKT.add(querry[i]);
        }

        b = 0;
        a = 0;

        TextArea[][] btn_TableOutput = new TextArea[i_count + 1][];
        String[][] Right1Var = new String[str_SentenceKT.size() + 1][str_SentenceKT.size() + 1];
        String[][] f = new String[str_SentenceKT.size() + 1][str_SentenceKT.size() + 1];

        for (int i = 1; i < str_SentenceKT.size() + 2; i++) {
            btn_TableOutput[i] = new TextArea[str_SentenceKT.size() + 2];

        }
        for (int i = 1; i < str_SentenceKT.size() + 2; i++) {
            for (int j = 1; j < str_SentenceKT.size() + 2; j++) {
                btn_TableOutput[i][j] = new TextArea();
                pnlCKY.add(btn_TableOutput[i][j]);
                btn_TableOutput[i][j].setSize(80, 80);

                if (i == 1 && j == 1) {
                    btn_TableOutput[i][j].setLocation(0, 0);
                } else {
                    if (i == 1) {
                        btn_TableOutput[i][j].setLocation(0, (j - 1) * 80);
                    } else if (j == 1) {
                        btn_TableOutput[i][j].setLocation((i - 1) * 80, 0);
                    } else {
                        btn_TableOutput[i][j].setLocation((i - 1) * 80, (j - 1) * 80);
                    }
                }
                if (i == 1) {
                    if (j == 1) {
                        Sleep();
                        btn_TableOutput[i][j].setText(String.valueOf(j));
                    } else {
                        Sleep();
                        btn_TableOutput[i][j].setText(String.valueOf(j - 1));

                    }

                }
                if (j == 1 && i != 1) {
                    Sleep();
                    btn_TableOutput[i][j].setText(String.valueOf(i) + "\r\n" + str_SentenceKT.get(a));

                    a++;
                }

                if (i == j && j > 1) {
                    if (b < str_SentenceKT.size()) {
                        for (int kt = 0; kt < i_count_SentenceHaveProbability; kt++) {
                            // if (str_treebankKT.get(b) == str_Right1of2variableKTXX.get(kt) &&
                            if (str_SentenceKT.get(b).equals(str_Right2of2variableKTXX.get(kt))) {
                                str_treebankKT.add(str_Right1of2variableKTXX.get(kt));
                                str_sentenTree.add(str_Right2of2variableKTXX.get(kt));
                                str_tree.add(str_Right1of2variableKTXX.get(kt));
                                f_ProbabilityKT.add(f_Probability.get(kt));
                                Sleep();
                                btn_TableOutput[i][j].setText(str_treebankKT.get(b) + "\r\n" + "(" + String.valueOf(i) + "," + String.valueOf(j - 1) + ")" + "\r\n" + "(" + f_Probability.get(kt) + ")");
                                Right1Var[i - 1][j - 1] = str_treebankKT.get(b);
                                f[i - 1][j - 1] = String.valueOf(f_Probability.get(kt));
                                btn_TableOutput[i][j].setForeground(Color.WHITE);
                                btn_TableOutput[i][j].setBackground(Color.red);
                                b++;
                                break;
                            }
                        }
                    }
                }
            }
        }
        String res = "";
        while (str_tree.size() > 1) {
            int count_loop = 0;
            int dem_c = 0;
            int dem_oke = 0;
            int lienke = 0;
            int sizeAfterRemove = 0;
            for (int i = str_tree.size() - 1; i > 0;) {
                int cc = 0;
                for (int kt = 0; kt < i_count_SentenceHaveProbability; kt++) {
                    if ((str_tree.get(i - 1) + " " + str_tree.get(i)).equals(str_Right2of2variableKTXX.get(kt))) {
                        if ((str_tree.size() > 2 && str_Right1of2variableKTXX.get(kt).equals("s"))) {
                            continue;
                        } else if (lienke != 0) {
                            if ((str_Right1of2variableKTXX.get(kt).equals("vp") && str_tree.get(i + 1).equals("vp"))) {
                                continue;
                            }
                        } else {
                            if (lienke != 0 && sizeAfterRemove > 4) {
                                lienke = 0;
                                break;
                            } else {
                                res = " ( " + str_Right1of2variableKTXX.get(kt) + " ( " + str_tree.get(i - 1) + " " + str_sentenTree.get(i - 1) + " ) ( " + str_tree.get(i) + " " + str_sentenTree.get(i) + " ) " + " ) ";

                                String Kt_str[] = str_sentenTree.get(i).split("");
                                if (Kt_str.length > 9) {
                                    String s = " ( " + str_tree.get(i - 1) + " " + str_sentenTree.get(i - 1) + " ) ( " + str_tree.get(i) + " " + str_sentenTree.get(i) + " ) ";
                                    str_sentenTree.set(i - 1, s);
                                } else {
                                    String s = " ( " + str_tree.get(i - 1) + " " + str_sentenTree.get(i - 1) + " ) ( " + str_tree.get(i) + " " + str_sentenTree.get(i) + " ) " + " ) ";
                                    str_sentenTree.set(i - 1, s);

                                }
                                sizeAfterRemove = str_tree.size();
                                str_tree.set(i - 1, str_Right1of2variableKTXX.get(kt));
                                str_tree.remove(i);
                                str_sentenTree.remove(i);
                                dem_oke++;
                                i = str_tree.size() - 1 - 1 * dem_oke;
                                cc++;
                                lienke++;
                                count_loop++;
                                break;
                            }
                        }
                    }

                }
                if (cc == 0) {

                    dem_c++;
                    lienke = 0;
                    i = str_tree.size() - 2 - 2 * dem_c;
                }
            }
            if (count_loop == 0) {
                break;
            }
        }

        int dem_l = 0;
        float f_pro = 0;
        for (int i = 2; i <= str_treebankKT.size(); i++) {
            //Số lần chạy
            for (int j = 0; j < i - 1; j++) {
                int count_K = 0;

                int dem_k = i - (j + 1);
                for (int k = i - 1; k >= dem_k; k--) {
                    int count_L = 1;
                    for (int l = i; l >= i - j; l--) {
                        dem_l = i;
                        for (int m = 0; m < str_Right2of2variableKTXX.size(); m++) {
                            if (Right1Var[dem_k + count_K][dem_k] != (null) && Right1Var[dem_l][dem_k + count_L] != (null)) {
                                String str_KT[] = Right1Var[dem_k + count_K][dem_k].split(" ");
                                String str_KTvc[] = Right1Var[dem_l][dem_k + count_L].split(" ");
                                for (int n = 0; n < str_KT.length; n++) {
                                    for (int o = 0; o < str_KTvc.length; o++) {
                                        if (str_Right2of2variableKTXX.get(m).equals(str_KT[n]
                                                + " " + str_KTvc[o])) {
                                            Sleep();
                                            if (!btn_TableOutput[dem_l + 1][dem_k + 1].getText().equals(str_Right1of2variableKTXX.get(m))) {
                                                if (str_Right1of2variableKTXX.get(m).equals("s")) {
                                                    btn_TableOutput[dem_l + 1][dem_k + 1].setBackground(Color.YELLOW);
                                                } else {
                                                    if (btn_TableOutput[dem_l + 1][dem_k + 1].getBackground() != Color.YELLOW) {
                                                        btn_TableOutput[dem_l + 1][dem_k + 1].setBackground(Color.GREEN);
                                                    }
                                                }

                                                String str_pro[] = f[dem_k + count_K][dem_k].split(" ");
                                                String str_pro1[] = f[dem_l][dem_k + count_L].split(" ");

                                                f_pro = Float.parseFloat(str_pro[n]) * Float.parseFloat(str_pro1[o]);

                                                btn_TableOutput[dem_l + 1][dem_k + 1].setText(btn_TableOutput[dem_l + 1][dem_k + 1].getText() + str_Right1of2variableKTXX.get(m) + "\r\n" + "(" + str_KT[n]
                                                        + " " + str_KTvc[o] + ")" + "\r\n" + "(" + (dem_k + count_K + 1) + "," + (dem_k) + ")" + "," + "(" + (dem_l + 1) + "," + (dem_k + count_L) + ")" + "\r\n" + "(" + f_pro + ")" + "\r\n");

                                            }
                                            f[dem_l][dem_k] += " " + String.valueOf(f_pro);
                                            Right1Var[dem_l][dem_k] += " " + str_Right1of2variableKTXX.get(m);
                                        }
                                    }

                                }

                            }
                        }

                        count_L++;
                    }
                    count_K++;
                }

            }

        }

        // TODO add your handling code here:
        JScrollPane pane = new JScrollPane();
        Panel pnltree = new Panel();
      
        pane.add(pnltree);
        this.add(pane);
        pnltree.setSize(400, 400);
        pnltree.setLocation(230, 350);
        String s = "( ROOT " + res + " ) ).";
        Tree tree = Tree.valueOf(s);
        tree.pennPrint();
        objTree.setTree(tree);
        objTree.setLayout(new FlowLayout());
        objTree.setVisible(true);
        pnltree.add(objTree);

    }//GEN-LAST:event_btnActionPCFGActionPerformed
    public void Sleep() {
        try {
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(FrHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    TreeJPanel objTree = new TreeJPanel();

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActionPCFG;
    private javax.swing.JButton btnProbability;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pnlCKY;
    private javax.swing.JScrollPane scrPnl;
    private javax.swing.JTextPane txtGrammar;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextPane txtProba;
    // End of variables declaration//GEN-END:variables
}
